/*
 * Copyright 2017 Keval Patel.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

apply plugin: 'com.android.application'
apply from: '../gradle/config.gradle'
apply from: '../gradle/deps.gradle'

android {
    aaptOptions {
        noCompress "webp"
    }
    compileSdkVersion buidlConfig.compile
    compileOptions {
        sourceCompatibility javaCompatibility.sourceCompatibility
        targetCompatibility javaCompatibility.targetCompatibility
    }

    defaultConfig {
        multiDexEnabled true
        applicationId "com.kevalpatel2106.sample"

        //sdks
        minSdkVersion buidlConfig.min
        targetSdkVersion buidlConfig.target

        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        def contentProviderAuthority = applicationId + ".stickercontentprovider"
        // Creates a placeholder property to use in the manifest.
        manifestPlaceholders =
                [contentProviderAuthority: contentProviderAuthority]
        // Adds a new field for the authority to the BuildConfig class.
        buildConfigField("String",
                "CONTENT_PROVIDER_AUTHORITY",
                "\"${contentProviderAuthority}\"")
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    packagingOptions {
        exclude 'lib/*/libnative-imagetranscoder.so'
        exclude 'lib/*/libnative-filters.so'
    }

    packagingOptions packageExcludes
    lintOptions lintOption
    aaptOptions aaptOption
    dexOptions dexOption
}


task checkDebug{
doLast {
    println("checkDebug")
    if (android.defaultConfig.applicationId.startsWith("com.whatsapp")) {
        throw new GradleException("applicationId in defaultConfig cannot start with com.whatsapp, please change your applicationId in app/build.gradle")
    }
    checkApplicationIdInDebug()
}
}


private void checkApplicationIdInDebug() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ignoreApplicationIdCheck = properties.getProperty('ignoreApplicationIdCheck')
    if (ignoreApplicationIdCheck == null) {
        if (android.defaultConfig.applicationId == "com.example.samplestickerapp") {
            throw new GradleException("Your applicationId is currently com.example.samplestickerapp, please change your applicationId to a different string in app/build.gradle in line 10")
        }
    } else {
        println("application id check ignored")
    }
}


task checkRelease {
    doLast {
        println("checkRelease")
        if (android.defaultConfig.applicationId.startsWith("com.example")) {
            throw new GradleException("applicationId in defaultConfig cannot start with com.example, please change your applicationId in app/build.gradle")
        }
    }
}

tasks.whenTaskAdded { task ->
    println(task.name)
    if (task.name.contains("assembleDebug")) {
        task.dependsOn checkDebug
    }
    if (task.name.contains("assembleRelease")) {
        task.dependsOn checkRelease
    }
}

dependencies {
    implementation project(':emoticongifkeyboard')
    implementation project(':gifpack-giphy')
    implementation project(':emoticonpack-ios')
    implementation project(':emoticonpack-android8')
    implementation project(':emoticonpack-android7')
    implementation project(':emoticonpack-twitter')
    implementation project(':emoticonpack-emojione')
    implementation project(':gifpack-tenor')
    implementation project(':emoticonpack-emojidex')
    implementation project(':emoticonpack-facebook')
    implementation project(':emoticonpack-messenger')
    implementation project(':emoticonpack-windows10')
    implementation project(':emoticonpack-windows8')
    implementation project(':emoticonpack-samsung')
    implementation project(':emoticonpack-htc')
    implementation project(':emoticonpack-lg')

    implementation 'androidx.multidex:multidex:2.0.0'
    implementation(otherLib.glide)
    implementation supportLib.appCompat

    //Fresco Image View for stickers webp
    def fresco_version = '2.5.0'
    implementation "com.facebook.fresco:fresco:$fresco_version"
    implementation "com.facebook.fresco:webpsupport:$fresco_version"
    implementation "com.facebook.fresco:animated-webp:$fresco_version"
    implementation "com.facebook.fresco:animated-base:$fresco_version"

}
